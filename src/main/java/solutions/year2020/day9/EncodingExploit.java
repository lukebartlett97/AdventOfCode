package solutions.year2020.day9;

import solutions.SolutionMain;

import java.util.ArrayList;
import java.util.List;

public class EncodingExploit extends SolutionMain {
    private String RESOURCE_PATH = "/year2020/Day9/";

    public EncodingExploit()
    {
        setResourcePath(RESOURCE_PATH);
    }

    @Override
    protected String solve(List<String> data) {
        List<Long> longData = convertToLongList(data);
        return Long.toString(findSum(longData, findBrokenValue(longData, guessPreamble(data))));
    }

    private int guessPreamble(List<String> data) {
        return data.size() == 20 ? 5 : 25;
    }

    private long findSum(List<Long> data, long target) {
        List<Long> sequence = new ArrayList<>();
        for(int index = 0; index < data.size(); index++) {
            int actualIndex = index;
            while(sequence.stream().reduce((x, y) -> x+y).orElse(0L) < target) {
                sequence.add(data.get(actualIndex));
                actualIndex++;
            }
            printInfo(sequence.toString());
            if(sequence.stream().reduce((x, y) -> x+y).orElse(0L) == target) {
                return sequence.stream().max(Long::compareTo).orElse(0L) + sequence.stream().min(Long::compareTo).orElse(0L);
            }
            sequence = new ArrayList<>();
        }
        return -1;
    }

    private long findBrokenValue(List<Long> data, int preamble) {
        for(int currentIndex = preamble; currentIndex < data.size(); currentIndex++) {
            if(!checkCanSum(data, currentIndex, preamble)) {
                return data.get(currentIndex);
            }
        }
        return -1;
    }

    private boolean checkCanSum(List<Long> data, int currentIndex, int preamble) {
        Long val = data.get(currentIndex);
        for(int checkIndex = currentIndex - preamble; checkIndex < currentIndex; checkIndex++) {
            for(int otherCheck = checkIndex + 1; otherCheck < currentIndex; otherCheck++) {
                if(data.get(checkIndex) + data.get(otherCheck) == val) {
                    return true;
                }
            }
        }
        return false;
    }
}
